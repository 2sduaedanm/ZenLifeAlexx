"""
Django settings for TopAdmin project.
Generated by 'django-admin startproject' using Django 2.1.4.
For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/
For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""
import datetime
import os
from os.path import join
from django.utils.translation import gettext_lazy as _

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
from storages.utils import setting

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'k$*5uxp5e7a5x(1h4!kdv2s3ost2wrj%igeksv-(mg$30_2omh'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'grappelli',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'comingsoon',
    'corsheaders',
    'rest_framework',
    'versatileimagefield',
    'api',
    'structaq',
    'admin_reorder',
    'django_admin_listfilter_dropdown',
    'adminsortable2',
    'smart_selects',
    'sorl.thumbnail',
    's3direct',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.BrokenLinkEmailsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'admin_reorder.middleware.ModelAdminReorder',
]


JWT_AUTH = {
    'JWT_VERIFY': True,
    'JWT_VERIFY_EXPIRATION': True,
    'JWT_EXPIRATION_DELTA': datetime.timedelta(seconds=300000000),
    'JWT_AUTH_HEADER_PREFIX': 'Bearer',

}


REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
}


ROOT_URLCONF = 'TopAdmin.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'TopAdmin.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     }
# }
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'zenlife',
        'USER': 'postgres',
        'PASSWORD': 'root',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = 'static/'

GRAPPELLI_ADMIN_TITLE = 'Admin'
# GRAPPELLI_AUTOCOMPLETE_LIMIT = 5

AUTH_USER_MODEL = 'structaq.User'

ADMIN_REORDER = (
    # models with custom name
    {'app': 'structaq', 'label': 'Auth', 'models': (
        'auth.Group',
        {'model': 'structaq.User', 'label': 'Users'},
    )},

    {'app': 'structaq', 'label': 'Types', 'models': (
        'auth.Group',
        {'model': 'structaq.AnswerType', 'label': 'Answer Type'},
        {'model': 'structaq.ChallengeType', 'label': 'Challenge Type'},
    )},

    {'app': 'structaq', 'label': 'Facts', 'models': (
        'auth.Group',
        {'model': 'structaq.FactStudentChallenge', 'label': 'Fact Student Challenge'},
        {'model': 'structaq.FactStudentChallengeHistory', 'label': 'Fact Student Challenge (HISTORY)'},
        {'model': 'structaq.FactStudentCurriculum', 'label': 'Fact Student Curriculum'},
    )},

    {'app': 'structaq', 'label': 'Features', 'models': (
        'auth.Group',
        {'model': 'structaq.FeatureChallenge', 'label': 'Feature Challenge'},
        {'model': 'structaq.FeatureChallengeCurriculum', 'label': 'Feature Challenge Curriculum'},
        {'model': 'structaq.FeatureCurriculum', 'label': 'Feature Curriculum'},
        {'model': 'structaq.FeatureInstructor', 'label': 'Feature Instructor'},
        {'model': 'structaq.FeatureProgression', 'label': 'Feature Progression'},
        {'model': 'structaq.FeatureStudent', 'label': 'Feature Student'},
        {'model': 'structaq.FeatureStudentProgression', 'label': 'Feature Student Progression'},
    )},
    {'app': 'structaq', 'label': 'Additional', 'models': (
        'auth.Group',
        {'model': 'structaq.MainTable', 'label': 'Progression -> Student -> Curriculum'},
    )},
)

LANGUAGES = [
    ('de', _('German')),
    ('en', _('English')),
]

LOGIN_REDIRECT_URL = 'home'
LOGOUT_REDIRECT_URL = '/'

CORS_ORIGIN_ALLOW_ALL = True

# CORS_ORIGIN_ALLOW_ALL = False

# CORS_ORIGIN_WHITELIST = (
#     'http//localhost:8002',
#     'http://zenlife.devhost1.com',
# )

# Versatile Image Field
VERSATILEIMAGEFIELD_SETTINGS = {
    # The amount of time, in seconds, that references to created images
    # should be stored in the cache. Defaults to `2592000` (30 days)
    'cache_length': 2592000,
    'cache_name': 'versatileimagefield_cache',
    'jpeg_resize_quality': 70,
    'sized_directory_name': '__sized__',
    'filtered_directory_name': '__filtered__',
    'placeholder_directory_name': '__placeholder__',
    'create_images_on_demand': False,
    'image_key_post_processor': None,
    'progressive_jpeg': False
}

MEDIA_ROOT = join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

THUMBNAIL_COLORSPACE = None
THUMBNAIL_PRESERVE_FORMAT = True

permission_items = [
    'answertype',
    'challengetype',
    'factstudentchallenge',
    'factstudentcurriculum',
    'featurechallenge',
    'featurechallengecurriculum',
    'featurecurriculum',
    'featureinstructor',
    'featureprogression',
    'featurestudent',
    'featurestudentprogression',
    'maintable',
    'kvstore',
    'factstudentchallengehistory',
]

VIDEO_FOLDER = 'video'

AWS_STORAGE_BUCKET_NAME = 'zenlife-prod'
AWS_QUERYSTRING_AUTH = True
AWS_PRELOAD_METADATA = True
AWS_AUTO_CREATE_BUCKET = True
AWS_S3_REGION_NAME = 'us-east-2'
AWS_S3_SIGNATURE_VERSION = 's3v4'

S3_OBJECT_EXPIRATION = 604800

# getattr(settings, name, default)

# print(setting('AWS_S3_ACCESS_KEY_ID', setting('AWS_ACCESS_KEY_ID')))
# print(setting('AWS_S3_SECRET_ACCESS_KEY', setting('AWS_SECRET_ACCESS_KEY')))

# aws_access_key_id = AKIAJKEEWMUC4SE5PIVQ
# aws_secret_access_key = 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

# settings for s3direct uploader
AWS_ACCESS_KEY_ID = 'AKIAJKEEWMUC4SE5PIVQ'
AWS_SECRET_ACCESS_KEY = '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'
AWS_S3_ENDPOINT_URL = 'https://s3.us-east-2.amazonaws.com'

S3DIRECT_DESTINATIONS = {
    'destination': {
        # "key" [required] The location to upload file
        #       1. String: folder path to upload to
        #       2. Function: generate folder path + filename using a function
        'key': 'uploads/video',

        # "auth" [optional] Limit to specfic Django users
        #        Function: ACL function
        'auth': lambda u: u.is_staff,

        # "allowed" [optional] Limit to specific mime types
        #           List: list of mime types
        'allowed': [
            'image/jpeg',
            'image/png',
            'video/mp4',
            'video/x-flv',
            'video/MP2T',
            'video/3gpp',
            'video/quicktime',
            'video/x-msvideo',
            'video/x-ms-wmv',
            'application/x-mpegURL'
        ],

        # "bucket" [optional] Bucket if different from AWS_STORAGE_BUCKET_NAME
        #          String: bucket name
        # 'bucket': 'custom-bucket',

        # "endpoint" [optional] Endpoint if different from AWS_S3_ENDPOINT_URL
        #            String: endpoint URL
        # 'endpoint': 'custom-endpoint',

        # "region" [optional] Region if different from AWS_S3_REGION_NAME
        #          String: region name
        # 'region': 'custom-region',  # Default is 'AWS_S3_REGION_NAME'

        # "acl" [optional] Custom ACL for object, default is 'public-read'
        #       String: ACL
        'acl': 'public-read',
        # 'acl': 'private',

        # "cache_control" [optional] Custom cache control header
        #                 String: header
        'cache_control': 'max-age=2592000',

        # "content_disposition" [optional] Custom content disposition header
        #                       String: header
        'content_disposition': lambda x: 'attachment; filename="{}"'.format(x),

        # "content_length_range" [optional] Limit file size
        #                        Tuple: (from, to) in bytes
        'content_length_range': (500, 200000000),

        # "server_side_encryption" [optional] Use serverside encryption
        #                          String: encrytion standard
        'server_side_encryption': 'AES256',

        # "allow_existence_optimization" [optional] Checks to see if file already exists,
        #                                returns the URL to the object if so (no upload)
        #                                Boolean: True, False
        'allow_existence_optimization': False,
    },
}